{
  "version": 3,
  "sources": ["../src/orcid.ts"],
  "sourcesContent": ["'use strict'\n\n/**\n * Checks that a string is a valid ORCID of any format\n * @param {string} input String to test format of\n * @returns {boolean}\n */\nexport function inAcceptedFormat(input: string): boolean {\n  if (typeof input !== 'string') throw TypeError('Input must be string')\n\n  // in e.g. \"https://orcid.org/0001-2345-6789-012X\"\n  //  - the 's' in https is optional\n  //  - the https:// itself is optional\n  //  - the https://orcid.org/ portion is optional\n  //  - the dashes between letters are optional\n  //  - each of the 4 digit group must be 4 digits long\n  //  - the last digit can optionally be an X\n  //  - letter case is not consequential\n  return /^((https?:\\/\\/)?orcid\\.org\\/)?([0-9]{4}-?){3}[0-9]{3}[0-9X]$/i.test(input)\n}\n\n/**\n * Converts a valid ORCID (of any format) into the dashed format\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toDashFormat(input: string): string {\n  const noDash = toNoDashFormat(input)\n  return [0, 4, 8, 12].map(it => noDash.slice(it, it + 4)).join('-')\n}\n\n/**\n * Converts a valid ORCID (of any format) into the non-dashed format (without validating the input first - useful internally)\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nfunction toNoDashFormatWithoutValidation(input: string): string {\n  return input.replace(/-/g, '').slice(-16).toUpperCase()\n}\n\n/**\n * Converts a valid ORCID (of any format) into the non-dashed format\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toNoDashFormat(input: string): string {\n  validate(input)\n  return toNoDashFormatWithoutValidation(input)\n}\n\n/**\n * Converts an ORCID to its corresponding URI, e.g. https://orcid.org/xxxxxxx......\n * @param {string} input Any valid ORCID\n * @param {boolean=} secure true (default): https, false: http\n * @returns {string}\n */\nexport function toUriWithProtocol(input: string, secure?: boolean): string {\n  return (secure === undefined || !!secure ? 'https' : 'http') + '://' + toUriWithoutProtocol(input)\n}\n\n/**\n * Converts an ORCID to is corresponding URI, without a protocol, e.g. orcid.org/xxxxxx.....\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toUriWithoutProtocol(input: string): string {\n  return 'orcid.org/' + toDashFormat(input)\n}\n\n/**\n * Returns true or false indicating whether a string conforms to any format of ORCID.\n * @param {string} input Any string to test\n * @returns {boolean}\n */\nexport function isValid(input: string): boolean {\n  if (!inAcceptedFormat(input)) return false\n  const inputNoDash = toNoDashFormatWithoutValidation(input)\n\n  let total = 0\n  for (let i = 0; i < 15; i++) {\n    total = (total + +inputNoDash[i]) * 2\n  }\n  const result = (12 - (total % 11)) % 11\n  return inputNoDash[15] === (result === 10 ? 'X' : result + '')\n}\n\n/**\n * A side-effect version of `isValid` - will throw Error if `isValid` would return false.\n * @param {string} input\n * @returns {void}\n */\nexport function validate(input: string): void {\n  if (!isValid(input)) throw Error('Invalid ORCID')\n}\n\nexport const ORCID = {\n  isValid,\n  validate,\n  inAcceptedFormat,\n  toDashFormat,\n  toNoDashFormat,\n  toUriWithProtocol,\n  toUriWithoutProtocol,\n}\n"],
  "mappings": "yaAAA,+LAOO,WAA0B,EAAwB,CACvD,GAAI,MAAO,IAAU,SAAU,KAAM,WAAU,sBAAsB,EAUrE,MAAO,gEAAgE,KAAK,CAAK,CACnF,CAOO,WAAsB,EAAuB,CAClD,KAAM,GAAS,EAAe,CAAK,EACnC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAE,EAAE,IAAI,GAAM,EAAO,MAAM,EAAI,EAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CACnE,CAOA,WAAyC,EAAuB,CAC9D,MAAO,GAAM,QAAQ,KAAM,EAAE,EAAE,MAAM,GAAG,EAAE,YAAY,CACxD,CAOO,WAAwB,EAAuB,CACpD,SAAS,CAAK,EACP,EAAgC,CAAK,CAC9C,CAQO,WAA2B,EAAe,EAA0B,CACzE,MAAQ,KAAW,QAAa,CAAC,CAAC,EAAS,QAAU,QAAU,MAAQ,EAAqB,CAAK,CACnG,CAOO,WAA8B,EAAuB,CAC1D,MAAO,aAAe,EAAa,CAAK,CAC1C,CAOO,WAAiB,EAAwB,CAC9C,GAAI,CAAC,EAAiB,CAAK,EAAG,MAAO,GACrC,KAAM,GAAc,EAAgC,CAAK,EAEzD,GAAI,GAAQ,EACZ,OAAS,GAAI,EAAG,EAAI,GAAI,IACtB,EAAS,GAAQ,EAAC,EAAY,IAAM,EAEtC,KAAM,GAAU,IAAM,EAAQ,IAAO,GACrC,MAAO,GAAY,MAAS,KAAW,GAAK,IAAM,EAAS,GAC7D,CAOO,WAAkB,EAAqB,CAC5C,GAAI,CAAC,EAAQ,CAAK,EAAG,KAAM,OAAM,eAAe,CAClD,CAEO,KAAM,GAAQ,CACnB,UACA,WACA,mBACA,eACA,iBACA,oBACA,sBACF",
  "names": []
}
