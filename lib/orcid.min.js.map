{
  "version": 3,
  "sources": ["../src/orcid.ts"],
  "sourcesContent": ["'use strict'\n\n/**\n * Checks that a string is a valid ORCID of any format\n * @param {string} input String to test format of\n * @returns {boolean}\n */\nexport function inAcceptedFormat(input: string): boolean {\n  if (typeof input !== 'string') throw TypeError('Input must be string')\n\n  // in e.g. \"https://orcid.org/0001-2345-6789-012X\"\n  //  - the 's' in https is optional\n  //  - the https:// itself is optional\n  //  - the https://orcid.org/ portion is optional\n  //  - the dashes between letters are optional\n  //  - each of the 4 digit group must be 4 digits long\n  //  - the last digit can optionally be an X\n  //  - letter case is not consequential\n  return /^((https?:\\/\\/)?orcid\\.org\\/)?([0-9]{4}-?){3}[0-9]{3}[0-9X]$/i.test(input)\n}\n\n/**\n * Converts a valid ORCID (of any format) into the dashed format\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toDashFormat(input: string): string {\n  const noDash = toNoDashFormat(input)\n  return [0, 4, 8, 12].map(it => noDash.slice(it, it + 4)).join('-')\n}\n\n/**\n * Converts a valid ORCID (of any format) into the non-dashed format (without validating the input first - useful internally)\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nfunction toNoDashFormatWithoutValidation(input: string): string {\n  return input.replace(/-/g, '').slice(-16).toUpperCase()\n}\n\n/**\n * Converts a valid ORCID (of any format) into the non-dashed format\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toNoDashFormat(input: string): string {\n  validate(input)\n  return toNoDashFormatWithoutValidation(input)\n}\n\n/**\n * Converts an ORCID to its corresponding URI, e.g. https://orcid.org/xxxxxxx......\n * @param {string} input Any valid ORCID\n * @param {boolean=} secure true (default): https, false: http\n * @returns {string}\n */\nexport function toUriWithProtocol(input: string, secure?: boolean): string {\n  return (secure === undefined || !!secure ? 'https' : 'http') + '://' + toUriWithoutProtocol(input)\n}\n\n/**\n * Converts an ORCID to is corresponding URI, without a protocol, e.g. orcid.org/xxxxxx.....\n * @param {string} input Any valid ORCID\n * @returns {string}\n */\nexport function toUriWithoutProtocol(input: string): string {\n  return 'orcid.org/' + toDashFormat(input)\n}\n\n/**\n * Returns true or false indicating whether a string conforms to any format of ORCID.\n * @param {string} input Any string to test\n * @returns {boolean}\n */\nexport function isValid(input: string): boolean {\n  if (!inAcceptedFormat(input)) return false\n  const inputNoDash = toNoDashFormatWithoutValidation(input)\n\n  let total = 0\n  for (let i = 0; i < 15; i++) {\n    total = (total + +inputNoDash[i]) * 2\n  }\n  const result = (12 - (total % 11)) % 11\n  return inputNoDash[15] === (result === 10 ? 'X' : result + '')\n}\n\n/**\n * A side-effect version of `isValid` - will throw Error if `isValid` would return false.\n * @param {string} input\n * @returns {void}\n */\nexport function validate(input: string): void {\n  if (!isValid(input)) throw Error('Invalid ORCID')\n}\n\nexport const ORCID = {\n  isValid,\n  validate,\n  inAcceptedFormat,\n  toDashFormat,\n  toNoDashFormat,\n  toUriWithProtocol,\n  toUriWithoutProtocol,\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,WAAAE,EAAA,qBAAAC,EAAA,YAAAC,EAAA,iBAAAC,EAAA,mBAAAC,EAAA,sBAAAC,EAAA,yBAAAC,EAAA,aAAAC,IAAA,eAAAC,EAAAV,GAOO,SAASG,EAAiBQ,EAAwB,CACvD,GAAI,OAAOA,GAAU,SAAU,MAAM,UAAU,sBAAsB,EAUrE,MAAO,gEAAgE,KAAKA,CAAK,CACnF,CAOO,SAASN,EAAaM,EAAuB,CAClD,MAAMC,EAASN,EAAeK,CAAK,EACnC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAE,EAAE,IAAIE,GAAMD,EAAO,MAAMC,EAAIA,EAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CACnE,CAOA,SAASC,EAAgCH,EAAuB,CAC9D,OAAOA,EAAM,QAAQ,KAAM,EAAE,EAAE,MAAM,GAAG,EAAE,YAAY,CACxD,CAOO,SAASL,EAAeK,EAAuB,CACpD,OAAAF,EAASE,CAAK,EACPG,EAAgCH,CAAK,CAC9C,CAQO,SAASJ,EAAkBI,EAAeI,EAA0B,CACzE,OAAQA,IAAW,QAAeA,EAAS,QAAU,QAAU,MAAQP,EAAqBG,CAAK,CACnG,CAOO,SAASH,EAAqBG,EAAuB,CAC1D,MAAO,aAAeN,EAAaM,CAAK,CAC1C,CAOO,SAASP,EAAQO,EAAwB,CAC9C,GAAI,CAACR,EAAiBQ,CAAK,EAAG,MAAO,GACrC,MAAMK,EAAcF,EAAgCH,CAAK,EAEzD,IAAIM,EAAQ,EACZ,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,GAASA,GAAQ,CAACD,EAAYE,CAAC,GAAK,EAEtC,MAAMC,GAAU,GAAMF,EAAQ,IAAO,GACrC,OAAOD,EAAY,EAAE,KAAOG,IAAW,GAAK,IAAMA,EAAS,GAC7D,CAOO,SAASV,EAASE,EAAqB,CAC5C,GAAI,CAACP,EAAQO,CAAK,EAAG,MAAM,MAAM,eAAe,CAClD,CAEO,MAAMT,EAAQ,CACnB,QAAAE,EACA,SAAAK,EACA,iBAAAN,EACA,aAAAE,EACA,eAAAC,EACA,kBAAAC,EACA,qBAAAC,CACF",
  "names": ["orcid_exports", "__export", "ORCID", "inAcceptedFormat", "isValid", "toDashFormat", "toNoDashFormat", "toUriWithProtocol", "toUriWithoutProtocol", "validate", "__toCommonJS", "input", "noDash", "it", "toNoDashFormatWithoutValidation", "secure", "inputNoDash", "total", "i", "result"]
}
